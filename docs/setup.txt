Singleton partern là phương thức chỉ gọi lại một lần đối với database mongo

Factory Pattern + Strategy partern for product table create product

### Service discount:
1. Generator discount code [shop | admin]
2. Get all discount code [user | shop]
3. get all product by discount code [user]
4. get discount amount [user]
5. delete discount code [admin | shop]
6. cancel discount code [user]


// solution oroder
+ optimistic locks: chặn các luồng đi cuả tất cả nhiều luồng, cho phép một luồng đi vào và lấy giá trị xong trả về lại và xong đến luồng khác, luồng khác ... sử dụng trong case ko để tồn kho quá bán


#### Redis
why use ?
2 điểm mấu chốt là hiệu suất cao và đồng thời cao
+ hiệu suất cao: người dùng access => 1 số data trong db đầu tiên => chậm vì read từ disk cứng => lần tiếp theo có thể lấy trực tiếp từ bộ đệm (cache)
+ đồng thời cao: các request mà bộ đệm hoạt động trực tiếp có thể chịu được bao nhiêu lớn hơn nhiều hơn sao việc mình truy cập trực tiếp vào db => ta xem xét chuyển một phần nào đó cơ sở dữ liệu sang bộ đệm để một phần request chuyển đến bộ đệm và truy xuất dữ liệu mà ko cần đi qua db nào nữa
(string, hash) => kiểu dữ liệu
# kịch bản sử dụng

#transaction redis
1. success, fail

#### service aws: integrate IAM, Bucket S3, EC2
### implement cloudfront for storge image